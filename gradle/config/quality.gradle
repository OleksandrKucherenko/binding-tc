// tools: Code Analysis Tools

import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
  repositories {
    jcenter()
    mavenLocal()
    mavenCentral()
  }
  dependencies {
    // https://github.com/aaschmid/gradle-cpd-plugin
    classpath 'de.aaschmid.gradle.plugins:gradle-cpd-plugin:+'
  }
}

task checkOpenResults(dependsOn: ['check']) {
  description = 'Open reports of ALL attached Quality Tools in Web browser'
  group = 'Reporting'

  // do nothing, it used for dependency graph building only
}

/* [ LINT ] ========================================================================================================= */
if (ENABLE_QUALITY) {
  task lintOpenResults(dependsOn: ['lint']) {
    description = 'Open all reports for all flavors and build configurations.'
    group = 'Reporting'
  }
  checkOpenResults.dependsOn lintOpenResults
  afterEvaluate { iterateVariants(this.&createLintOpenResultsTask) }
}

/* [ UNIT Test Results ] ============================================================================================ */
if (ENABLE_QUALITY && useTesting) {
  task testOpenResults(dependsOn: ['test']) {
    description = 'Open all Unit Tests results  for all flavors and build types.'
    group = 'Reporting'
  }
  checkOpenResults.dependsOn testOpenResults
  afterEvaluate { iterateVariants(this.&createTestOpenResultsTask) }
}

/* [ JACOCO coverage ] ============================================================================================== */
if (ENABLE_QUALITY && useTesting && useJacoco) {
  task jacocoOpenResults(dependsOn: ['test']) {
    // Task opens report file in default web-browser
    description = 'open Code Coverage for Unit Tests in web browser'
    group = 'Reporting'
  }
  checkOpenResults.dependsOn jacocoOpenResults
  afterEvaluate { iterateVariants(this.&createJacocoOpenResultsTask) }
}

/* [ HELPERS ] ====================================================================================================== */

def adoptToOs(String path) {
  // remove doubled dir separators
  path = path.replace("//", "/")
  path = path.replace("\\\\", "\\")

  if (Os.isFamily(Os.FAMILY_WINDOWS)) { // windows
    path = path.replace("/", "\\")
  } else if (Os.isFamily(Os.FAMILY_UNIX)) { // linux
    path = path.replace("\\", "/")
  } else if (Os.isFamily(Os.FAMILY_MAC)) { // mac os
    path = path.replace("\\", "/")
  }

  return path;
}

def openExternalBrowser(String path) {
  if (Os.isFamily(Os.FAMILY_WINDOWS)) { // windows
    return ['cmd.exe', '/C', path]
  } else if (Os.isFamily(Os.FAMILY_UNIX)) { // linux
    return ["${rootProject.rootDir}/gradle/open-test-results.sh", path]
  } else if (Os.isFamily(Os.FAMILY_MAC)) { // mac os
    // TODO: implement me
    return ['']
  }
}

def iterateVariants(func) {
  if (project.android.productFlavors.size() > 0) {
    project.android.productFlavors.each { f ->
      iterateBuildTypes(f.name, func)
    }
  } else {
    iterateBuildTypes('', func)
  }
}

def iterateBuildTypes(String flavor, func) {
  project.android.buildTypes.each { b ->
    func(flavor, b.name);
  }
}

/* [ TASKS CREATORS ] =============================================================================================== */

def createLintOpenResultsTask(String f, String b) {
  def flavor = f.capitalize()
  def buildType = b.capitalize()
  def taskName = "openLintReport${flavor}${buildType}"

  project.task(taskName, type: Exec, dependsOn: ["lint${flavor}${buildType}"]) {
    description = "open lint${flavor}${buildType} results in current web browser."
    group = 'Reporting Routine'

    ignoreExitValue true // task is not critical, ignore it failure

    // path is relative to current project path: {project}\\samples\\sample-01
    // file:/C:/Android/_projects_/meter/samples/sample-01/build/outputs/lint-results.html
    def lintFile = "lint-results-${flavor}${buildType}-fatal.html"
    def path = """${project.buildDir}\\outputs\\${lintFile}"""

    project.logger.info("  report: ${adoptToOs(path)}")
    commandLine openExternalBrowser(adoptToOs(path))
  }

  lintOpenResults.dependsOn taskName
}

def createTestOpenResultsTask(String f, String b) {
  def flavor = f.capitalize()
  def buildType = b.capitalize()
  def taskName = "openTestReport${flavor}${buildType}"

  project.task(taskName, type: Exec, dependsOn: ["test${flavor}${buildType}UnitTest"]) {
    // Task opens report file in default web-browser
    description = 'open Unit Tests results in current web browser'
    group = 'Reporting Routine'

    ignoreExitValue true // task is not critical, ignore it failure

    // path is relative to current project path: {project}\\samples\\sample-01
    // file:///C:/Android/_projects_/meter/library/build/reports/tests/index.html
    def path = adoptToOs("""${project.buildDir}\\reports\\tests\\${flavor}${b.toLowerCase()}\\index.html""")

    project.logger.info("  report: ${adoptToOs(path)}")
    commandLine openExternalBrowser(adoptToOs(path))
  }

  testOpenResults.dependsOn taskName
}

def createJacocoOpenResultsTask(String f, String b) {
  def flavor = f.capitalize()
  def buildType = b.capitalize()
  def taskName = "generateJacocoReport${flavor}${buildType}"

  project.task(taskName, type: JacocoReport, dependsOn: ["test${flavor}${buildType}UnitTest"]) {
    description = 'Generates Jacoco coverage reports: XML and HTML'
    group = 'Reporting Routine'

    // use hidden configuration, for details look into JacocoPlugin.groovy
    jacocoClasspath = project.configurations['androidJacocoAnt']

    // exclude auto-generated classes and tests
    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/Mock*.*']
    def tstSrcDir = adoptToOs("${project.buildDir}/intermediates/classes/test/${flavor}/${b.toLowerCase()}")
    def flavorSrcDir = adoptToOs("${project.buildDir}/intermediates/classes/${flavor}/${b.toLowerCase()}")
    def testsTree = fileTree(dir: tstSrcDir, excludes: fileFilter)
    def flavorTree = fileTree(dir: flavorSrcDir, excludes: fileFilter)

    // sources
    def testsSrc = "${project.projectDir}/src/test/java"
    def testsFlavorSrc = "${project.projectDir}/src/test${flavor}/java"
    def testsBuildSrc = "${project.projectDir}/src/test${buildType}/java"
    def testsVariantSrc = "${project.projectDir}/src/test${flavor}${buildType}/java"
    def mainSrc = "${project.projectDir}/src/main/java"

    def sources = [testsSrc, testsFlavorSrc, testsBuildSrc, testsVariantSrc, mainSrc]
    def classes = [testsTree, flavorTree]

    // attach module sources into sample/demo/app report
    int counter = 0;
    while (project.hasProperty('jacocoModuleSrc_' + counter)) {
      def moduleProperty = project.property('jacocoModuleSrc_' + counter)
      project.logger.info("  JaCoCo includes [${counter}]: ${moduleProperty} (Variant: ${flavor}/${buildType})")

      def moduleClasses = adoptToOs("${moduleProperty}/build/intermediates/classes/debug")
      def moduleSrc = adoptToOs("{$moduleProperty}/src/main/java")

      def moduleTree = fileTree(dir: moduleClasses, excludes: fileFilter)

      sources.add(moduleSrc)
      classes.add(moduleTree)
      counter++;
    }

    sourceDirectories = files(sources)
    classDirectories = files(classes)
    executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])

    reports {
      xml {
        enabled = true
        destination = "${project.buildDir}/reports/jacoco/${flavor}/${buildType}/jacoco.xml"
      }
      csv.enabled false
      html {
        enabled = true
        destination = "${project.buildDir}/reports/jacoco/${flavor}/${buildType}"
      }
    }
  }

  def taskName2 = "openJacocoReport${flavor}${buildType}"
  project.task(taskName2, type: Exec, dependsOn: [taskName]) {
    // Task opens report file in default web-browser
    description = 'open Code Coverage for Unit Tests in web browser'
    group = 'Reporting Routine'

    ignoreExitValue true // task is not critical, ignore it failure

    def path = """${project.buildDir}/reports/jacoco/${flavor}/${buildType}/index.html"""

    rootProject.logger.info("  report: ${adoptToOs(path)}")
    commandLine openExternalBrowser(adoptToOs(path))
  }

  jacocoOpenResults.dependsOn taskName2
}
