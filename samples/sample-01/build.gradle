// Application: Sample-01

import org.apache.tools.ant.taskdefs.condition.Os

import javax.xml.parsers.DocumentBuilderFactory

buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath 'org.robolectric:robolectric-gradle-plugin:0.11.+'
  }
}

// CONFIGURATION based on: http://tools.android.com/tech-docs/new-build-system/user-guide

apply plugin: 'com.android.application'

if (useRobolectric) {
  apply plugin: 'robolectric'
}

/* DEFINE REPOSITORY WITH LATEST ROBOLECTRIC VERSION */
repositories {
  mavenCentral()
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
}

dependencies {
  /* ----------------------------- */
  /* RELEASE and DEBUG COMPILATION */
  /* ----------------------------- */
  compile "com.android.support:appcompat-v7:${androidSupportLib}"
  compile project(':library')

  compile fileTree(dir: 'libs', include: ['*.jar'])

  /* -------------------------- */
  /* UNIT TESTING configuration */
  /* -------------------------- */

  // custom libs of the sample
  androidTestCompile fileTree(dir: 'libs', include: ['*.jar'])

  /* UNIT TESTS HAS DEPENDENCY ON SUPPORT LIB, SO INCLUDE IT MANUALLY FOR CONTROLLING THE VERSION OF IT */
  androidTestCompile "com.android.support:support-v4:${androidSupportLib}"

  /* Espresso (v1.1) */
  // ALTERNATIVE:
  //   androidTestCompile files('../_libs/espresso/espresso-1.1-bundled.jar')
  androidTestCompile files(
          '../_libs/espresso/espresso-1.1.jar',
          '../_libs/espresso/testrunner-1.1.jar',
          '../_libs/espresso/testrunner-runtime-1.1.jar')

  /* Hamcrest (v1.3) */
  // ALTERNATIVE:
  //    androidTestCompile files(
  //            '../_libs/hamcrest/hamcrest-core-1.3.jar',
  //            '../_libs/hamcrest/hamcrest-library-1.3.jar',
  //            '../_libs/hamcrest/hamcrest-integration-1.3.jar')
  androidTestCompile 'org.hamcrest:hamcrest-core:+'
  androidTestCompile 'org.hamcrest:hamcrest-library:+'
  androidTestCompile 'org.hamcrest:hamcrest-integration:+'

  /* Dagger (v1.2.1) and Mockito (v1.9.5) */
  // ALTERNATIVE:
  //    androidTestCompile files('../_libs/mockito-all-1.9.5.jar')
  //    androidTestCompile files('../_libs/dagger-1.2.1.jar')
  // ORIGINAL:
  //    androidTestCompile 'com.squareup.dagger:dagger:+'
  //    androidTestCompile 'org.mockito:mockito-all:+'

  /* jUnit (v4.12-beta-1) */
  // ALTERNATIVE:
  //    androidTestCompile files('../_libs/junit-4.11.jar')
  androidTestCompile('junit:junit:+') { exclude module: 'hamcrest-core' }

  /* Fest Android (v1.0.8), fest util (v1.2.5), Fest core (v 2.0M10) */
  // ALTERNATIVE:
  //    androidTestCompile files(
  //            '../_libs/fest/fest-assert-core-2.0M10.jar',
  //            '../_libs/fest/fest-util-1.2.5.jar',
  //            '../_libs/fest/fest-android-1.0.8.jar')
  androidTestCompile 'com.squareup:fest-android:+'

  /* Robolectric (v2.3) */
  // ALTERNATIVE:
  //    androidTestCompile files(
  //            '../_libs/robolectric-2.3-with-dependencies.jar')
  androidTestCompile('org.robolectric:robolectric:+') {
    exclude module: 'classworlds'
    exclude module: 'maven-artifact'
    exclude module: 'maven-artifact-manager'
    exclude module: 'maven-error-diagnostics'
    exclude module: 'maven-model'
    exclude module: 'maven-plugin-registry'
    exclude module: 'maven-profile'
    exclude module: 'maven-project'
    exclude module: 'maven-settings'
    exclude module: 'nekohtml'
    exclude module: 'plexus-container-default'
    exclude module: 'plexus-interpolation'
    exclude module: 'plexus-utils'
    exclude module: 'wagon-file'
    exclude module: 'wagon-http-lightweight'
    exclude module: 'wagon-http-shared'
    exclude module: 'wagon-provider-api'
  }
}

android {
  /* INHERIT SETTINGS FROM THE ROOT PROJECT */
  compileSdkVersion androidCompileSdkVersion
  buildToolsVersion androidBuildToolsVersion

  /* ATTACH TEST INSTRUMENTATION, DEFINE SDK VERSION, DEFINE APP VERSION */
  defaultConfig {
    minSdkVersion androidMinSdkVersion /* 10 */
    targetSdkVersion androidTargetSdkVersion /* 19 */

    versionCode 1
    versionName "1.0"

    // attach espresso runner
    testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
  }

  /* REDEFINE TESTS FOLDER */
  sourceSets {
    androidTest.setRoot('src/tests')
    androidTest {
      // UNCOMMENT for enabling 'custom manifest for unit tests' feature (part #1 of 2):
      // manifest.srcFile 'src/tests/AndroidManifest.xml'
    }
  }

  /* signing keystores configuration */
  signingConfigs {
    // custom debug key, allows to test social networks
    debug {
      storeFile file("${rootProject.rootDir}/gradle/release/artfulbits.debug.keystore")
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
    // production key
    release {
      storeFile file("${rootProject.rootDir}/gradle/release/artfulbits.keystore")

      keyAlias 'artfulbits'
      storePassword 'kPJ6LIl6nZV3'
      keyPassword 'j6m8gPYjL1e3'
    }
  }

  /* CONFIGURE OBFUSCATION AND OPTIMIZATION, SIGNATURES */
  buildTypes {
    // release configuration
    release {
      signingConfig signingConfigs.release

      runProguard = true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    // debug configuration with custom debug key
    debug {
      signingConfig signingConfigs.debug

      runProguard = false
      debuggable true
      jniDebugBuild true
      //testCoverageEnabled = true
    }
    // release without obfuscation
    noProguardRelease.initWith(buildTypes.release)
    noProguardRelease {
      runProguard = false
    }
    // release with enabled debug options
    debuggableRelease.initWith(buildTypes.noProguardRelease)
    debuggableRelease {
      debuggable true
      jniDebugBuild true
    }
  }

  /* EXCLUDE SOME UNNEEDED FILES FROM PACKAGE */
  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/LICENSE.txt'
    exclude 'META-INF/license.txt'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/NOTICE.txt'
    exclude 'META-INF/notice.txt'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/DEPENDENCIES.txt'
    exclude 'META-INF/dependencies.txt'
    exclude 'META-INF/LGPL2.1'
    exclude '.readme'
    exclude '.README'
  }

  /* GIVE DEX MORE MEMORY */
  dexOptions {
    incremental true
    javaMaxHeapSize "4g"
  }

  /* CUSTOMIZE UNIT TESTS */
  // UNCOMMENT for enabling 'custom manifest for unit tests' feature (part #2 of 2):
  // force Unit Tests use our own AndroidManifest.xml instead of auto-generated
  //    testVariants.all { variant ->
  //        variant.processResources.manifestFile = android.sourceSets["androidTest"].manifest.srcFile
  //        logger.info(">>>>>> Unit Tests new manifest: " + variant.processResources.manifestFile)
  //    }

  /* CUSTOMIZE OUTPUT FILE NAME */
  applicationVariants.all { variant ->
    def String ANDROID_NAME_SPACE = "http://schemas.android.com/apk/res/android"

    // alternative:
    //      def manifestPath = android.sourceSets["main"].manifest.srcFile
    def manifestPath = variant.processResources.manifestFile

    def builderFactory = DocumentBuilderFactory.newInstance()
    builderFactory.setNamespaceAware(true)

    // extract manifest values if AndroifManifest.xml available
    if (null != manifestPath && new File(manifestPath.toString()).exists()) {
      def manifestXml = builderFactory.newDocumentBuilder().parse(manifestPath).documentElement
      def packageName = manifestXml.getAttribute("package")
      def versionCode = manifestXml.getAttributeNS(ANDROID_NAME_SPACE, "versionCode")
      def versionName = manifestXml.getAttributeNS(ANDROID_NAME_SPACE, "versionName")
      def gitRevision = rootProject.hasProperty("GIT_REVISION") ? rootProject.properties["GIT_REVISION"] : "0"
      def versionType = variant.name

      // modify file name
      def file = variant.outputFile
      def version = versionName + "." + versionCode + "." + gitRevision
      def newFilename = packageName + "-" + version + "-" + versionType + ".apk"
      variant.outputFile = new File(file.parent, newFilename)

      // dump into logs final filename
      def log = "Application variant output file name: '" + newFilename + "'"
      rootProject.logger.lifecycle(log)
    }
  }
}

if (useRobolectric) {
  robolectric {
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'

    // reserve more memory
    maxHeapSize = "4g"
  }
}

apply plugin: 'idea'

idea {
  module {
    testOutputDir = file('build/test-classes/debug')
  }
}

/* ---------------------------------------------------------------------------------------------  */
/* CUSTOM TASKS                                                                                   */
/* ---------------------------------------------------------------------------------------------  */

task openResults(dependsOn: ["openLintResults"]) {
  description = 'open Tools results in current web browser'
  group = 'Code Quality'

  logger.lifecycle(":openResults");
}

if (useRobolectric) {
  // Task opens robolectric report file in default web-browser
  task openTestResults(type: Exec, dependsOn: ["test"]) {
    description = 'open Robolectric results in current web browser'
    group = 'Code Quality'

    logger.lifecycle(":openTestResults")

    // done: force open of HTML file
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
      // path is relative to current project path:
      //      {project}\\samples\\sample-01
      def path = """.\\build\\test-report\\index.html"""
      commandLine "cmd.exe", '/C', path

    } else {
      // this build server, or Mac OS, or Linux - ignore this call
    }
  }

  openResults.dependsOn openTestResults
}

// Task opens LINT utility report file in default web browser
task openLintResults(type: Exec, dependsOn: ["lint"]) {
  description = 'open Android Lint results in current web browser'
  group = 'Code Quality'

  logger.lifecycle(":openLintResults")

  // done: force open of HTML file
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    // path is relative to current project path:
    //      {project}\\samples\\sample-01
    def path = """.\\build\\lint-results.html"""
    commandLine "cmd.exe", '/C', path

  } else {
    // this build server, or Mac OS, or Linux - ignore this call
  }
}