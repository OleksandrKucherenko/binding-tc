// Application: Sample-01


import org.apache.tools.ant.taskdefs.condition.Os

import javax.xml.parsers.DocumentBuilderFactory

// CONFIGURATION based on: http://tools.android.com/tech-docs/new-build-system/user-guide

apply plugin: 'android'
apply plugin: 'android-test'

dependencies {
    repositories {
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }

    /* ----------------------------- */
    /* RELEASE and DEBUG COMPILATION */
    /* ----------------------------- */
    compile 'com.android.support:appcompat-v7:+'
    compile project(':library')

    compile fileTree(dir: 'libs', include: ['*.jar'])

    /* -------------------------- */
    /* UNIT TESTING configuration */
    /* -------------------------- */

    // custom libs of the sample
    androidTestCompile fileTree(dir: 'libs', include: ['*.jar'])

    // Espresso
    // ALTERNATIVE:
    //   androidTestCompile files('../_libs/espresso/espresso-1.1-bundled.jar')
    androidTestCompile files(
            '../_libs/espresso/espresso-1.1.jar',
            '../_libs/espresso/testrunner-1.1.jar',
            '../_libs/espresso/testrunner-runtime-1.1.jar')

    // Hamcrest (v1.3)
    // ALTERNATIVE:
    //    androidTestCompile files(
    //            '../_libs/hamcrest/hamcrest-core-1.3.jar',
    //            '../_libs/hamcrest/hamcrest-library-1.3.jar',
    //            '../_libs/hamcrest/hamcrest-integration-1.3.jar')
    androidTestCompile 'org.hamcrest:hamcrest-integration:+',
            'org.hamcrest:hamcrest-core:+',
            'org.hamcrest:hamcrest-library:+'

    // Dagger (v1.2.1) and Mockito (v1.9.5)
    // ALTERNATIVE:
    //    androidTestCompile files(
    //            '../_libs/mockito-all-1.9.5.jar',
    //            '../_libs/dagger-1.2.1.jar')
    androidTestCompile 'com.squareup.dagger:dagger:+',
            'org.mockito:mockito-all:+'

    // jUnit (v4.11)
    // ALTERNATIVE:
    //    androidTestCompile files('../_libs/junit-4.11.jar')
    androidTestCompile('junit:junit:+') { exclude module: 'hamcrest-core' }

    // Fest Android (v1.0.8), fest util (v1.2.5), Fest core (v 2.0M10)
    // ALTERNATIVE:
    //    androidTestCompile files(
    //            '../_libs/fest/fest-assert-core-2.0M10.jar',
    //            '../_libs/fest/fest-util-1.2.5.jar',
    //            '../_libs/fest/fest-android-1.0.8.jar')
    androidTestCompile 'com.squareup:fest-android:+'

    // Robolectric (v2.3)
    // ALTERNATIVE:
    //    androidTestCompile files(
    //            '../_libs/robolectric-2.3-with-dependencies.jar')
    androidTestCompile('org.robolectric:robolectric:2.3-SNAPSHOT') {
        exclude module: 'classworlds'
        exclude module: 'maven-artifact'
        exclude module: 'maven-artifact-manager'
        exclude module: 'maven-error-diagnostics'
        exclude module: 'maven-model'
        exclude module: 'maven-plugin-registry'
        exclude module: 'maven-profile'
        exclude module: 'maven-project'
        exclude module: 'maven-settings'
        exclude module: 'nekohtml'
        exclude module: 'plexus-container-default'
        exclude module: 'plexus-interpolation'
        exclude module: 'plexus-utils'
        exclude module: 'wagon-file'
        exclude module: 'wagon-http-lightweight'
        exclude module: 'wagon-http-shared'
        exclude module: 'wagon-provider-api'
    }
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion rootProject.buildToolsVersion

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion /* 10 */
        targetSdkVersion rootProject.targetSdkVersion /* 18 */

        versionCode 1
        versionName "1.0"

        // attach espresso runner
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }

    sourceSets {
        androidTest.setRoot('src/test')
        androidTest {
            // UNCOMMENT for enabling 'custom manifest for unit tests' feature (part #1 of 2):
            // manifest.srcFile 'src/test/AndroidManifest.xml'
        }
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            testCoverageEnabled = false
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }

    dexOptions {
        incremental false
        javaMaxHeapSize "4g"
    }

    // UNCOMMENT for enabling 'custom manifest for unit tests' feature (part #2 of 2):
    // force Unit Tests use our own AndroidManifest.xml instead of auto-generated
    //    testVariants.all { variant ->
    //        variant.processResources.manifestFile = android.sourceSets["androidTest"].manifest.srcFile
    //        logger.info(">>>>>> Unit Tests new manifest: " + variant.processResources.manifestFile)
    //    }

    // customize output file name
    applicationVariants.all { variant ->
        def String ANDROID_NAME_SPACE = "http://schemas.android.com/apk/res/android"

        // alternative:
        //      def manifestPath = android.sourceSets["main"].manifest.srcFile
        def manifestPath = variant.processResources.manifestFile

        def builderFactory = DocumentBuilderFactory.newInstance()
        builderFactory.setNamespaceAware(true)

        // extract manifest values
        if (null != manifestPath && new File(manifestPath.toString()).exists()) {
            def manifestXml = builderFactory.newDocumentBuilder().parse(manifestPath).documentElement
            def packageName = manifestXml.getAttribute("package")
            def versionCode = manifestXml.getAttributeNS(ANDROID_NAME_SPACE, "versionCode")
            def versionName = manifestXml.getAttributeNS(ANDROID_NAME_SPACE, "versionName")
            def gitRevision = rootProject.hasProperty("GIT_REVISION") ? rootProject.properties["GIT_REVISION"] : "0"
            def versionType = variant.name

            // modify file name
            def file = variant.outputFile
            def version = versionName + "." + versionCode + "." + gitRevision
            def newFilename = packageName + "-" + version + "-" + versionType + ".apk"
            variant.outputFile = new File(file.parent, newFilename)

            // dump into logs final filename
            def log = "Application variant output file name: '" + newFilename + "'"
            rootProject.logger.lifecycle(log)
        }
    }

}

androidTest {
    include '**/*Test.class'
    exclude '**/espresso/**/*.class'

    maxHeapSize = "4g"
}

apply plugin: 'idea'

idea {
    module {
        testOutputDir = file('build/test-classes/debug')
    }
}

/* ---------------------------------------------------------------------------------------------  */
/* CUSTOM TASKS                                                                                   */
/* ---------------------------------------------------------------------------------------------  */

task openResults(dependsOn: ["openLintResults", "openTestResults"]) {
}

// Task opens robolectric report file in default web-browser
task openTestResults(type: Exec, dependsOn: ["test"]) {
    logger.lifecycle(":openTestResults")

    // todo: force open of HTML file
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        // path is relative to current project path:
        //      C:\\Android\\Projects\\_helpers_\\binding-tc\\samples\\sample-01
        def path = """.\\build\\test-report\\index.html"""
        commandLine 'cmd.exe', '/C', path

    } else {
        // this build server, or Mac OS, or Linux - ignore this call
    }
}

// Task opens LINT utility report file in default web browser
task openLintResults(type: Exec, dependsOn: ["lint"]) {
    logger.lifecycle(":openLintResults")

    // todo: force open of HTML file
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        // path is relative to current project path:
        //      C:\\Android\\Projects\\_helpers_\\binding-tc\\samples\\sample-01
        def path = """.\\build\\lint-results.html"""
        commandLine 'cmd.exe', '/C', path

    } else {
        // this build server, or Mac OS, or Linux - ignore this call
    }
}

